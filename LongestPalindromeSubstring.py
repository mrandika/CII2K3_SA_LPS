# -*- coding: utf-8 -*-
"""Tubes SA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvI8pk2Sw3iFKXcLJzJbq6Ado-bkncvn
"""

import time

class String(object):
  def __init__(self, value, start, end, length):
    self.value = value
    self.start = start
    self.end = end
    self.length = length

  def len(self):
    return len(self.value)

  def getPalindrome(self):
    return self.value[self.start:self.end + 1]

def bf_LPS(string: String, benchmarkTable: list, DEBUG_MODE = False):
  # Init benchmark variable
  tmStart = time.time()
  comparison = 0

  # Init function variable
  maxLen = 1
  start = 0

  stringLength = string.len()

  if DEBUG_MODE:
    print(f"[BF - LPS] Searching for LPS in string:", string.value)

  # Iterate through overall string
  for i in range(stringLength):

    # Iterate i to stringLength
    for j in range(i, stringLength):
      flag = 1

      # Check if palindrome
      for k in range(0, ((j - i) // 2) + 1):
        comparison += 1

        # Check if current substring is not palindrome
        if string.value[i+k] != string.value[j-k]:
          flag = 0
      
      # Mark palindrome string
      if (flag != 0 and (j - i + 1) > maxLen):
        start = i
        maxLen = j - i + 1

  # Update current palindrome string
  if maxLen > 1:
    string.start = start
    string.end = start + (maxLen - 1)
    string.length = maxLen
  
  tmEnd = time.time()
  elapsed = tmEnd - tmStart

  benchmarkTable.append({
      'string': string.value,
      'elapsed': elapsed,
      'comparisons': comparison
  })

  if DEBUG_MODE:
    if (string.start == -1) and (string.end == -1):
      print(f"[BF - LPS] Done. No palindrome string found. Elapsed:", elapsed, "- Comparisons made:", comparison)
    else:
      print(f"[BF - LPS] Done. Palindrome string found at index ", string.start, "to", string.end, "which is", string.getPalindrome(), "with length of", string.length, "- Elapsed:", elapsed, "- Comparisons made:", comparison)
  
    print()

def dp_LPS(string: String, benchmarkTable: list, DEBUG_MODE = False):
  # Init benchmark variable
  tmStart = time.time()
  comparison = 0

  # Init function variable
  maxLen = 1
  start = 0
  k = 0

  stringLength = string.len()

  if DEBUG_MODE:
    print(f"[DP - LPS] Searching for LPS in string:", string.value)

  # Init DP table
  table = [[0 for x in range(stringLength)] for y in range(stringLength)]

  # Define ALL substring with length of 1 is a palindrome
  i = 0
  while (i < stringLength) :
    table[i][i] = True
    i = i + 1

  # Check for substring with length of 2
  i = 0
  while i < stringLength - 1 :
    if (string.value[i] == string.value[i + 1]):
      table[i][i + 1] = True
      start = i
      maxLen = 2
    i = i + 1
  
  # Check for substring with length greater than 2
  k = 3
  while k <= stringLength:
    i = 0

    while i < (stringLength - k + 1):
      comparison += 1

      # Get end index from start index and length
      j = i + k - 1

      # Check substring from i-th to j-th
      if (table[i + 1][j - 1] and string.value[i] == string.value[j]):
        table[i][j] = True

        if (k > maxLen):
          start = i
          maxLen = k
      
      i += 1
    k += 1
  
  # Update current palindrome string
  if maxLen > 1:
    string.start = start
    string.end = start + (maxLen - 1)
    string.length = maxLen
  
  tmEnd = time.time()
  elapsed = tmEnd - tmStart

  benchmarkTable.append({
      'string': string.value,
      'elapsed': elapsed,
      'comparisons': comparison
  })

  if DEBUG_MODE:
    if (string.start == -1) and (string.end == -1):
      print(f"[DP - LPS] Done. No palindrome string found. Elapsed:", elapsed, "- Comparisons made:", comparison)
    else:
      print(f"[DP - LPS] Done. Palindrome string found at index ", string.start, "to", string.end, "which is", string.getPalindrome(), "with length of", string.length, "- Elapsed:", elapsed, "- Comparisons made:", comparison)
  
    print()

def main():
  # Global Setting
  # Print results after running
  DEBUG_MODE = False

  if DEBUG_MODE:
    print("[INFO] DEBUG_MODE is active.")
    print("[INFO] Printing all results...\n")

  # Test strings
  # Case: mid, left, right, none
  testStrings = [
    "zyxw malam vut srq",
    "zyxw vut srq kakak",
    "tamat zyxw vut srq",
    "zyxw vut srq",

    "po nml kji level hgfed cba",
    "po nml kji hgfed cba masam",
    "sinis po nml kji hgfed cba",
    "po nml kji hgfed cba",

    "abc defghi jklmn op kapak qrs tuv wx yz",
    "abc defghi jklmn op qrs tuv wx yz isi",
    "katak abc defghi jklmn op qrs tuv wx yz",
    "abc defghi jklmn op qrs tuv wx yz"
  ]

  # Brute Force
  bf_benchmark_table = []
  for string in testStrings:
    case = String(string, -1, -1, 0)
    bf_LPS(case, bf_benchmark_table, DEBUG_MODE)

  if DEBUG_MODE:
    print("--- === --- === --- === ---\n")

  # Dynamic Programming
  dp_benchmark_table = []
  for string in testStrings:
    case = String(string, -1, -1, 0)
    dp_LPS(case, dp_benchmark_table, DEBUG_MODE)

  print("--- === --- SUMMARY --- === ---\n")

  print(">> Brute Force <<")
  print("{:<40} {:<25} {:<10}".format('String', 'Time Elapsed', 'Comparisons Made'))
  for result in bf_benchmark_table:
    print("{:<40} {:<25} {:<10}".format(result['string'], result['elapsed'], result['comparisons']))

  print("\n>> Dynamic Programming <<")
  print("{:<40} {:<25} {:<10}".format('String', 'Time Elapsed', 'Comparisons Made'))
  for result in dp_benchmark_table:
    print("{:<40} {:<25} {:<10}".format(result['string'], result['elapsed'], result['comparisons']))

if __name__ == "__main__":
  main()